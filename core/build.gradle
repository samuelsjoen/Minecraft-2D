import org.gradle.internal.os.OperatingSystem

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion"
}

sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.test.java.srcDirs = [ "test/" ]
sourceSets.main.resources.srcDirs = ["assets"]

project.ext.mainClassName = "com.minecraft.game.DesktopLauncher"
project.ext.assetsDir = new File("assets")

task run(type: JavaExec) {
    dependsOn classes
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current().isMacOsX()) {
        jvmArgs = ['-XstartOnFirstThread']
    }
}

task debug(type: JavaExec) {
    dependsOn classes
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.isDirectory() }.collect { it }
        configurations.runtimeClasspath.findAll { !it.isDirectory() }.collect { zipTree(it) }
    }
    with jar
}

eclipse.project.name = appName + "-core"

test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
        }
    }